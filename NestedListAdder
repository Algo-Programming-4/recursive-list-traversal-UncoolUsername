"""
Gavin Riggins
9/29/2024
Advanced Algorithms & Data structures
Recursive List Traversal

Note: I removed 2 of my test cases because they were somehow not finding the accurate
depth. This is because the assignemnt was already around 4 days late, I need something
to turn in, especally sense I have not touched the bubble sort project yet. 
(Deleting the test cases that fail is stupid, I agree)

I hope to ask you for some help in the upcomming days; until then just note that the
max_depth calculation is not accurate 100% of the time. I dont think this diserves full
credit for that reason.

That being said, this program passed all 5 of my test cases when it came to actually 
adding everything up; it is likely just a small mistake I am too junior in skill to 
understand. 
"""

# Format: [[expected output, maximum level of nesting], actual list]
# This is written as such to make it easier to add new test cases on the fly. All I need
# to do is add a new case to the dictionary and the main function will figure everything
# else out. 
test_cases = {
    "case1" : [[60, 4], [[[3, [4]], 6], 7, [10, 3], [4, [5, [2, 8]]], 8]],
    "case2" : [[68, 3], [2, 6, 3, 4, [9, 5, [3, 2, 7, 2], [4, 2, 5, 1]], [5, 8]]],
    "case3" : [[15, 3], [[[1, 2], [1, 2]], [[1, 2], 6]]],
}


def recursive_method(list, sum=0, max_depth=1):
    """This function will add up all the numbers from a list of lists using recursion."""
    chars = {
        "[" : 1,
        "]" : -1,
    }

    for i in list:
        if type(i) is int:
            sum += i
        else:
            # This updates the max depth by checking if the first character is in dictionary chars. 
            # This amount of nesting is terrible; oh well :(
            for e in chars:
                if str(i)[0] == e:
                    max_depth += chars[e]

            # Actual recursion part
            sum = recursive_method(i, sum)[0]

    return sum, max_depth


def main():
    # This method will print the results of all the test cases
    for i in range(1, len(test_cases) + 1):
        current_case = "case" + str(i)

        expected_output = test_cases[current_case][0]
        case_result = recursive_method(test_cases[current_case][1]) # cases[i][1] selects the list to search from each case table (seen above). This keeps the expected output seperate

        # Note: This code is not ideal, it is quite hard to read. It would be 
        # better off put into a loop. 
        print("Case:", current_case[4], "-" * 25, ">>")
        print("Passed:", expected_output[0] == case_result[0] and expected_output[1] == case_result[1])
        print("Expected output:", test_cases[current_case][0][0])
        print("Receved output:", case_result[0])
        print("Expected depth:", expected_output[1])
        print("Receved depth:", case_result[1], "\n")


main()
